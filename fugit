#!/usr/bin/env bash
#set -x

LOGFILE="fugit.log"
CONFFILE="fugit.conf"
CONFDIR="$HOME/fugit.d"
CONF=$CONFFILE

contains_confdir(){
	[ -f $1 ] || return 1
	grep --fixed-strings --silent --line-regexp "$2" "$1"
	return $?
}

contains_conffile(){
	# temporarily disable pathname expansion to prevent expansion of $1
	set -f
	for entry in $1; do
		if [ "$entry" == "$2" ]; then
			set +f
			return 0
		fi
	done
	set +f
	return 1
}

check_acl(){
	if [[ -d $CONF ]]; then
		R=$(echo $2 | tr '/' '_')
		eval $CONF/$R.conf
		if [[ "$1" == "pull" ]]; then
			return contains_confdir $PULL $3
		fi
		if [[ "$1" == "push" ]]; then
			return contains_confdir $PUSH $3
		fi
		return 1
	fi
	if [[ -f $CONF ]]; then
		eval $(grep -Fx "REPO $1" $CONFFILE -A 3 | tail -n +2)
		if [[ "$1" == "pull" ]]; then
			return contains_conffile $PULL $3
		fi
		if [[ "$1" == "push" ]]; then
			return contains_conffile $PUSH $3
		fi
		return 1
	fi
	return 1
}

push(){
	#read repo config and check acl
	AUTH=0
	check_acl "push" "$1" "$FUGIT_USER" && AUTH=1

	printf "%s %s: Trying to push to %s (Path %s)\n" "$(date)" "$FUGIT_USER" "$1" "$REAL" >> $LOGFILE
	if [ -z "$REAL" ]; then
		printf "%s %s: Unknown repo, abort\n" "$(date)" "$FUGIT_USER" >> $LOGFILE
		printf "FAIL"
		return 1
	fi

	#do access control
	if [[ $AUTH -eq 1 ]]; then
		git-receive-pack "$REAL"
		printf "%s %s: Push accepted\n" "$(date)" "$FUGIT_USER" >> $LOGFILE
	else
		printf "%s %s: Push rejected\n" "$(date)" "$FUGIT_USER" >> $LOGFILE
		printf "FAIL"
	fi
}

pull(){
	#read repo config and check acl
	AUTH=0
	check_acl "pull" $1 "$FUGIT_USER" && AUTH=1

	printf "%s %s: Trying to read from %s (Path %s)\n" "$(date)" "$FUGIT_USER" "$1" "$REAL" >> $LOGFILE
	if [ -z "$REAL" ]; then
		printf "%s %s: Unknown repo, abort\n" "$(date)" "$FUGIT_USER" >> $LOGFILE
		printf "FAIL"
		return 1
	fi

	#do access control
	if contains "$PULL" "$FUGIT_USER"; then
		git-upload-pack "$REAL"
		printf "%s %s: Pull accepted\n" "$(date)" "$FUGIT_USER" >> $LOGFILE
	else
		printf "%s %s: Pull rejected\n" "$(date)" "$FUGIT_USER" >> $LOGFILE
		printf "FAIL"
	fi
}

FUGIT_USER=$1
if [ -z "$FUGIT_USER" ]; then
	printf "%s UNKNOWN: No user name supplied\n" "$(date)" >> $LOGFILE
	exit 1
fi

printf "%s %s: Command is %s\n" "$(date)" "$FUGIT_USER" "$SSH_ORIGINAL_COMMAND" >> $LOGFILE
if [[ "$SSH_ORIGINAL_COMMAND" == "git-receive-pack "* ]]; then
	#extract argument
	REPO=${SSH_ORIGINAL_COMMAND#git-receive-pack }

	#remove quotes (without opening injection possibilities)
	REPO=$(echo $REPO | xargs echo)

	printf "%s %s: push to repo %s\n" "$(date)" "$FUGIT_USER" "$REPO" >> $LOGFILE
	push "$REPO"

elif [[ "$SSH_ORIGINAL_COMMAND" == "git-upload-pack "* ]]; then
	#extract argument
	REPO=${SSH_ORIGINAL_COMMAND#git-upload-pack }

	#remove quotes (without opening injection possibilities)
	REPO=$(echo $REPO | xargs echo)

	printf "%s %s: pull from repo %s\n" "$(date)" "$FUGIT_USER" "$REPO" >> $LOGFILE
	pull "$REPO"

else
	printf "%s %s: Unknown command %s\n" "$(date)" "$FUGIT_USER" "$SSH_ORIGINAL_COMMAND" >> $LOGFILE
	exit 1
fi
