Since I already suspected that _rudimentary_ (as in, really not that advanced)
git access control should be doable with some simple SSH key magic and the need
arose recently, I chose to do it. If you want more features, use gitolite or
something along those lines. Found a bug? Report it - or even better, fix it
and send a pull request!

fugit requires experience with configuring ssh, key-based logins, git and, should
it break, bash.

Setup
-----
Add
	PermitUserEnvironment yes
to your /etc/ssh/sshd_config.

Set up a system user.
Clone this repo into the home of the new user.
Make sure ~/fugit is executable.
If you like, change the log destination from the default (fugit.log) on line 4

Add the keys used to identify users to .ssh/authorized_keys and add a forced 
command executing ~/fugit as well as an environment directive setting up the 
internal user name (see the demo file in the repo for an example).

You might also want to add some or all of 
	no-port-forwarding,no-X11-forwarding,no-agent-forwarding
to the keys options.

Edit fugit.conf to contain exactly 4 lines of text per repository to be served.
Those should be, exactly in this order
	REPO <repo-identifier>		//Identifies the remote
	REAL=<path>			//Path to the repo on disk
	PUSH="<list of users>"		//Users allowed to push to the repo
	PULL="<list of users>"		//Users allowed to pull from the repo

How it works
------------
git exchanges it's data via stdin/stdout over ssh. fugit inserts itself
between that channel, distinguished between push and pull operations and
either allows the channel to continue or simply closes it. It's not exactly
rocket science, but it works.

Why
---
Because I need to restrict git access for one system user serving multiple
key-users to specific repositories without fine-grained control. So, really
only push/pull/nothing. I reviewed some of the existing options and found them
all pretty heavy on instructions, prerequisites and implementation complexity.
So I made my own. 
